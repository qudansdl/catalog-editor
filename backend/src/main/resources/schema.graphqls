scalar UUID
scalar Upload
scalar Long
scalar DateTime

interface Entity {
  id: UUID
}

input CategoryInput {
  id: UUID
  name: String
  isLeaf: Boolean
  parent: CategoryInput,
  children: [CategoryInput]
  created: DateTime
  updated: DateTime
}

type Category implements Entity {
  id: UUID
  name: String
  isLeaf: Boolean
  parent: Category,
  children: [Category]
  created: DateTime
  updated: DateTime
}



type Catalog  implements Entity {
  id: UUID
  name: String
  description: String
  categories: [Category]
  blocks: [CatalogBlock]
  created: DateTime
  updated: DateTime
}

type CatalogBlock  implements Entity  {
  id: UUID
  x: Int
  y: Int
  w: Int
  h: Int
  type: String
  content: String
  created: DateTime
  updated: DateTime
}



input CatalogBlockInput {
  id: UUID
  x: Int
  y: Int
  w: Int
  h: Int
  type: String
  content: String
}







type Template  implements Entity {
  id: UUID
  name: String
  description: String
  categories: [Category]
  blocks: [TemplateBlock]
  created: DateTime
  updated: DateTime
}

type TemplateBlock  implements Entity  {
  id: UUID
  x: Int
  y: Int
  w: Int
  h: Int
  type: String
  content: String
  created: DateTime
  updated: DateTime
}



input TemplateBlockInput {
  id: UUID
  x: Int
  y: Int
  w: Int
  h: Int
  type: String
  content: String
}







input BackgroundInput {
  id: UUID
  name: String
  content: String
}

type Background implements Entity {
  id: UUID
  name: String
  content: String
  categories: [Category]
  created: DateTime
  updated: DateTime
}

input ImageInput {
  id: UUID
  name: String
  content: String
}

type Image  implements Entity {
  id: UUID
  name: String
  content: String
  categories: [Category]
  created: DateTime
  updated: DateTime
}

input PatternInput {
  id: UUID
  name: String
  content: String
}


type Pattern  implements Entity {
  id: UUID
  name: String
  content: String
  categories: [Category]
  created: DateTime
  updated: DateTime
}

input TextInput {
  id: UUID
  name: String
  content: String
}

type Text  implements Entity  {
  id: UUID
  name: String
  content: String
  categories: [Category]
  created: DateTime
  updated: DateTime
}


input OrderInput {
  column: String
  dir: String
}

input ColumnInput {
  name: String
  value: String
  operation: String
  columns: [ColumnInput]
}

input DataTablesInput {
  start: Int
  length: Int
  order: [OrderInput]
  columns: [ColumnInput]
}

interface DataTablesOutput {
  recordsTotal: Long
  recordsFiltered: Long
  error: String
}

type CategoryOutput implements DataTablesOutput {
  recordsTotal: Long
  recordsFiltered: Long
  error: String
  data: [Category]
}

type CatalogOutput implements DataTablesOutput {
  recordsTotal: Long
  recordsFiltered: Long
  error: String
  data: [Catalog]
}


type TemplateOutput implements DataTablesOutput {
  recordsTotal: Long
  recordsFiltered: Long
  error: String
  data: [Template]
}

type BackgroundOutput implements DataTablesOutput {
  recordsTotal: Long
  recordsFiltered: Long
  error: String
  data: [Background]
}



type ImageOutput implements DataTablesOutput {
  recordsTotal: Long
  recordsFiltered: Long
  error: String
  data: [Image]
}

type PatternOutput implements DataTablesOutput {
  recordsTotal: Long
  recordsFiltered: Long
  error: String
  data: [Pattern]
}





type TextOutput implements DataTablesOutput {
  recordsTotal: Long
  recordsFiltered: Long
  error: String
  data: [Text]
}




type Query {
  categories(input: DataTablesInput): CategoryOutput
  category(categoryId: UUID): Category

  catalogs(input: DataTablesInput): CatalogOutput
  catalog(catalogId: UUID!): Catalog

  templates(input: DataTablesInput): TemplateOutput
  template(templateId: UUID!): Template

  backgrounds(input: DataTablesInput): BackgroundOutput
  background(imageId: UUID!): Background

  images(input: DataTablesInput): ImageOutput
  image(imageId: UUID!): Image

  patterns(input: DataTablesInput): PatternOutput
  pattern(patternId: UUID!): Pattern

  texts(input: DataTablesInput): TextOutput
  text(textId: UUID!): Text
}

type Mutation {
  createCategory(name: String, parentId: UUID): Category
  updateCategory(categoryId: UUID!, name: String): Category
  deleteCategory(categoryId: UUID!): Boolean

  createCatalog(name: String
    description: String
    categories: [CategoryInput]
    blocks: [CatalogBlockInput]
  ): Catalog
  updateCatalog(catalogId: UUID!,
    name: String
    description: String
    categories: [CategoryInput]
    blocks: [CatalogBlockInput]
  ): Catalog
  deleteCatalog(catalogId: UUID!): Boolean


  createTemplate(name: String
    description: String
    categories: [CategoryInput]
    blocks: [TemplateBlockInput]
  ): Template
  updateTemplate(templateId: UUID!,
    name: String
    description: String
    categories: [CategoryInput]
    blocks: [TemplateBlockInput]
  ): Template
  deleteTemplate(templateId: UUID!): Boolean


  createImage(
    name: String,
    content: String,
    categories: [CategoryInput]
  ): Image
  updateImage(
    imageId: UUID!,
    name: String,
    content: String,
    categories: [CategoryInput]
  ): Image
  deleteImage(imageId: UUID!): Boolean

  createText(
    name: String,
    content: String,
    categories: [CategoryInput]
  ): Text
  updateText(
    textId: UUID!,
    name: String,
    content: String,
    categories: [CategoryInput]
  ): Text
  deleteText(textId: UUID!): Boolean

  createBackground(
    name: String,
    content: String,
    categories: [CategoryInput]
  ): Background
  updateBackground(
    backgroundId: UUID!,
    name: String,
    content: String,
    categories: [CategoryInput]
  ): Background
  deleteBackground(backgroundId: UUID!): Boolean

  createPattern(
    name: String,
    content: String,
    categories: [CategoryInput]
  ): Pattern
  updatePattern(
    patternId: UUID!,
    name: String,
    content: String,
    categories: [CategoryInput]
  ): Pattern
  deletePattern(patternId: UUID!): Boolean
}
